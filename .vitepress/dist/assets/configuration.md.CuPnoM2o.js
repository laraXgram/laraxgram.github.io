import{_ as e,c as a,o as s,ag as n}from"./chunks/framework.BHpayLOB.js";const k=JSON.parse('{"title":"Configuration","description":"","frontmatter":{},"headers":[],"relativePath":"configuration.md","filePath":"configuration.md"}'),t={name:"configuration.md"};function o(l,i,h,r,p,d){return s(),a("div",null,i[0]||(i[0]=[n(`<h1 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h1><ul><li><a href="#introduction">Introduction</a></li><li><a href="#environment-configuration">Environment Configuration</a><ul><li><a href="#environment-variable-types">Environment Variable Types</a></li><li><a href="#retrieving-environment-configuration">Retrieving Environment Configuration</a></li><li><a href="#determining-the-current-environment">Determining the Current Environment</a></li><li><a href="#encrypting-environment-files">Encrypting Environment Files</a></li></ul></li><li><a href="#accessing-configuration-values">Accessing Configuration Values</a></li><li><a href="#configuration-caching">Configuration Caching</a></li><li><a href="#configuration-publishing">Configuration Publishing</a></li><li><a href="#debug-mode">Debug Mode</a></li></ul><p><a name="introduction"></a></p><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>All of the configuration files for the LaraGram framework are stored in the <code>config</code> directory. Each option is documented, so feel free to look through the files and get familiar with the options available to you.</p><p>These configuration files allow you to configure things like your database connection information, as well as various other core configuration values such as your application URL and encryption key.</p><p><a name="the-about-command"></a></p><h4 id="the-about-command" tabindex="-1">The <code>about</code> Command <a class="header-anchor" href="#the-about-command" aria-label="Permalink to &quot;The \`about\` Command&quot;">​</a></h4><p>LaraGram can display an overview of your application&#39;s configuration, drivers, and environment via the <code>about</code> Commander command.</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> laragram</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> about</span></span></code></pre></div><p>If you&#39;re only interested in a particular section of the application overview output, you may filter for that section using the <code>--only</code> option:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> laragram</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> about</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --only=environment</span></span></code></pre></div><p>Or, to explore a specific configuration file&#39;s values in detail, you may use the <code>config:show</code> Commander command:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> laragram</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config:show</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> database</span></span></code></pre></div><p><a name="environment-configuration"></a></p><h2 id="environment-configuration" tabindex="-1">Environment Configuration <a class="header-anchor" href="#environment-configuration" aria-label="Permalink to &quot;Environment Configuration&quot;">​</a></h2><p>It is often helpful to have different configuration values based on the environment where the application is running. For example, you may wish to use a different cache driver locally than you do on your production server.</p><p>To make this a cinch, LaraGram uses a rewritten version of the <a href="https://github.com/vlucas/phpdotenv" target="_blank" rel="noreferrer">DotEnv</a> PHP library. In a fresh LaraGram installation, the root directory of your application will contain a <code>.env.example</code> file that defines many common environment variables. During the LaraGram installation process, this file will automatically be copied to <code>.env</code>.</p><p>LaraGram&#39;s default <code>.env</code> file contains some common configuration values that may differ based on whether your application is running locally or on a production web server. These values are then read by the configuration files within the <code>config</code> directory using LaraGram&#39;s <code>env</code> function.</p><p>If you are developing with a team, you may wish to continue including and updating the <code>.env.example</code> file with your application. By putting placeholder values in the example configuration file, other developers on your team can clearly see which environment variables are needed to run your application.</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>Any variable in your <code>.env</code> file can be overridden by external environment variables such as server-level or system-level environment variables.</p></div><p><a name="environment-file-security"></a></p><h4 id="environment-file-security" tabindex="-1">Environment File Security <a class="header-anchor" href="#environment-file-security" aria-label="Permalink to &quot;Environment File Security&quot;">​</a></h4><p>Your <code>.env</code> file should not be committed to your application&#39;s source control, since each developer / server using your application could require a different environment configuration. Furthermore, this would be a security risk in the event an intruder gains access to your source control repository, since any sensitive credentials would get exposed.</p><p>However, it is possible to encrypt your environment file using LaraGram&#39;s built-in <a href="#encrypting-environment-files">environment encryption</a>. Encrypted environment files may be placed in source control safely.</p><p><a name="additional-environment-files"></a></p><h4 id="additional-environment-files" tabindex="-1">Additional Environment Files <a class="header-anchor" href="#additional-environment-files" aria-label="Permalink to &quot;Additional Environment Files&quot;">​</a></h4><p>Before loading your application&#39;s environment variables, LaraGram determines if an <code>APP_ENV</code> environment variable has been externally provided or if the <code>--env</code> CLI argument has been specified. If so, LaraGram will attempt to load an <code>.env.[APP_ENV]</code> file if it exists. If it does not exist, the default <code>.env</code> file will be loaded.</p><p><a name="environment-variable-types"></a></p><h3 id="environment-variable-types" tabindex="-1">Environment Variable Types <a class="header-anchor" href="#environment-variable-types" aria-label="Permalink to &quot;Environment Variable Types&quot;">​</a></h3><p>All variables in your <code>.env</code> files are typically parsed as strings, so some reserved values have been created to allow you to return a wider range of types from the <code>env()</code> function:</p><div class="overflow-auto"><table tabindex="0"><thead><tr><th><code>.env</code> Value</th><th><code>env()</code> Value</th></tr></thead><tbody><tr><td>true</td><td>(bool) true</td></tr><tr><td>(true)</td><td>(bool) true</td></tr><tr><td>false</td><td>(bool) false</td></tr><tr><td>(false)</td><td>(bool) false</td></tr><tr><td>empty</td><td>(string) &#39;&#39;</td></tr><tr><td>(empty)</td><td>(string) &#39;&#39;</td></tr><tr><td>null</td><td>(null) null</td></tr><tr><td>(null)</td><td>(null) null</td></tr></tbody></table></div><p>If you need to define an environment variable with a value that contains spaces, you may do so by enclosing the value in double quotes:</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">APP_NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;My Application&quot;</span></span></code></pre></div><p><a name="retrieving-environment-configuration"></a></p><h3 id="retrieving-environment-configuration" tabindex="-1">Retrieving Environment Configuration <a class="header-anchor" href="#retrieving-environment-configuration" aria-label="Permalink to &quot;Retrieving Environment Configuration&quot;">​</a></h3><p>All of the variables listed in the <code>.env</code> file will be loaded into the <code>$_ENV</code> PHP super-global when your application receives a request. However, you may use the <code>env</code> function to retrieve values from these variables in your configuration files. In fact, if you review the LaraGram configuration files, you will notice many of the options are already using this function:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;debug&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;APP_DEBUG&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span></code></pre></div><p>The second value passed to the <code>env</code> function is the &quot;default value&quot;. This value will be returned if no environment variable exists for the given key.</p><p><a name="determining-the-current-environment"></a></p><h3 id="determining-the-current-environment" tabindex="-1">Determining the Current Environment <a class="header-anchor" href="#determining-the-current-environment" aria-label="Permalink to &quot;Determining the Current Environment&quot;">​</a></h3><p>The current application environment is determined via the <code>APP_ENV</code> variable from your <code>.env</code> file. You may access this value via the <code>environment</code> method on the <code>App</code> <a href="/facades.html">facade</a>:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LaraGram\\Support\\Facades\\App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$environment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> App</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>You may also pass arguments to the <code>environment</code> method to determine if the environment matches a given value. The method will return <code>true</code> if the environment matches any of the given values:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">App</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;local&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // The environment is local</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">App</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;local&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;staging&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // The environment is either local OR staging...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>The current application environment detection can be overridden by defining a server-level <code>APP_ENV</code> environment variable.</p></div><p><a name="encrypting-environment-files"></a></p><h3 id="encrypting-environment-files" tabindex="-1">Encrypting Environment Files <a class="header-anchor" href="#encrypting-environment-files" aria-label="Permalink to &quot;Encrypting Environment Files&quot;">​</a></h3><p>Unencrypted environment files should never be stored in source control. However, LaraGram allows you to encrypt your environment files so that they may safely be added to source control with the rest of your application.</p><p><a name="encryption"></a></p><h4 id="encryption" tabindex="-1">Encryption <a class="header-anchor" href="#encryption" aria-label="Permalink to &quot;Encryption&quot;">​</a></h4><p>To encrypt an environment file, you may use the <code>env:encrypt</code> command:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> laragram</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env:encrypt</span></span></code></pre></div><p>Running the <code>env:encrypt</code> command will encrypt your <code>.env</code> file and place the encrypted contents in an <code>.env.encrypted</code> file. The decryption key is presented in the output of the command and should be stored in a secure password manager. If you would like to provide your own encryption key you may use the <code>--key</code> option when invoking the command:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> laragram</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env:encrypt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --key=3UVsEgGVK36XN82KKeyLFMhvosbZN1aF</span></span></code></pre></div><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>The length of the key provided should match the key length required by the encryption cipher being used. By default, LaraGram will use the <code>AES-256-CBC</code> cipher which requires a 32 character key. You are free to use any cipher supported by LaraGram&#39;s <a href="/encryption.html">encrypter</a> by passing the <code>--cipher</code> option when invoking the command.</p></div><p>If your application has multiple environment files, such as <code>.env</code> and <code>.env.staging</code>, you may specify the environment file that should be encrypted by providing the environment name via the <code>--env</code> option:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> laragram</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env:encrypt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --env=staging</span></span></code></pre></div><p><a name="decryption"></a></p><h4 id="decryption" tabindex="-1">Decryption <a class="header-anchor" href="#decryption" aria-label="Permalink to &quot;Decryption&quot;">​</a></h4><p>To decrypt an environment file, you may use the <code>env:decrypt</code> command. This command requires a decryption key, which LaraGram will retrieve from the <code>LARAGRAM_ENV_ENCRYPTION_KEY</code> environment variable:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> laragram</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env:decrypt</span></span></code></pre></div><p>Or, the key may be provided directly to the command via the <code>--key</code> option:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> laragram</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env:decrypt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --key=3UVsEgGVK36XN82KKeyLFMhvosbZN1aF</span></span></code></pre></div><p>When the <code>env:decrypt</code> command is invoked, LaraGram will decrypt the contents of the <code>.env.encrypted</code> file and place the decrypted contents in the <code>.env</code> file.</p><p>The <code>--cipher</code> option may be provided to the <code>env:decrypt</code> command in order to use a custom encryption cipher:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> laragram</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env:decrypt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --key=qUWuNRdfuImXcKxZ</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cipher=AES-128-CBC</span></span></code></pre></div><p>If your application has multiple environment files, such as <code>.env</code> and <code>.env.staging</code>, you may specify the environment file that should be decrypted by providing the environment name via the <code>--env</code> option:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> laragram</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env:decrypt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --env=staging</span></span></code></pre></div><p>In order to overwrite an existing environment file, you may provide the <code>--force</code> option to the <code>env:decrypt</code> command:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> laragram</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env:decrypt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --force</span></span></code></pre></div><p><a name="accessing-configuration-values"></a></p><h2 id="accessing-configuration-values" tabindex="-1">Accessing Configuration Values <a class="header-anchor" href="#accessing-configuration-values" aria-label="Permalink to &quot;Accessing Configuration Values&quot;">​</a></h2><p>You may easily access your configuration values using the <code>Config</code> facade or global <code>config</code> function from anywhere in your application. The configuration values may be accessed using &quot;dot&quot; syntax, which includes the name of the file and option you wish to access. A default value may also be specified and will be returned if the configuration option does not exist:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LaraGram\\Support\\Facades\\Config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app.timezone&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app.timezone&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Retrieve a default value if the configuration value does not exist...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app.timezone&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Asia/Seoul&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>To set configuration values at runtime, you may invoke the <code>Config</code> facade&#39;s <code>set</code> method or pass an array to the <code>config</code> function:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app.timezone&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;America/Chicago&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app.timezone&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;America/Chicago&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span></code></pre></div><p>To assist with static analysis, the <code>Config</code> facade also provides typed configuration retrieval methods. If the retrieved configuration value does not match the expected type, an exception will be thrown:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;config-key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;config-key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;config-key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;config-key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;config-key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;config-key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><a name="configuration-caching"></a></p><h2 id="configuration-caching" tabindex="-1">Configuration Caching <a class="header-anchor" href="#configuration-caching" aria-label="Permalink to &quot;Configuration Caching&quot;">​</a></h2><p>To give your application a speed boost, you should cache all of your configuration files into a single file using the <code>config:cache</code> Commander command. This will combine all of the configuration options for your application into a single file which can be quickly loaded by the framework.</p><p>You should typically run the <code>php laragram config:cache</code> command as part of your production deployment process. The command should not be run during local development as configuration options will frequently need to be changed during the course of your application&#39;s development.</p><p>Once the configuration has been cached, your application&#39;s <code>.env</code> file will not be loaded by the framework during requests or Commander commands; therefore, the <code>env</code> function will only return external, system level environment variables.</p><p>For this reason, you should ensure you are only calling the <code>env</code> function from within your application&#39;s configuration (<code>config</code>) files. You can see many examples of this by examining LaraGram&#39;s default configuration files. Configuration values may be accessed from anywhere in your application using the <code>config</code> function <a href="#accessing-configuration-values">described above</a>.</p><p>The <code>config:clear</code> command may be used to purge the cached configuration:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> laragram</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config:clear</span></span></code></pre></div><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p>If you execute the <code>config:cache</code> command during your deployment process, you should be sure that you are only calling the <code>env</code> function from within your configuration files. Once the configuration has been cached, the <code>.env</code> file will not be loaded; therefore, the <code>env</code> function will only return external, system level environment variables.</p></div><p><a name="configuration-publishing"></a></p><h2 id="configuration-publishing" tabindex="-1">Configuration Publishing <a class="header-anchor" href="#configuration-publishing" aria-label="Permalink to &quot;Configuration Publishing&quot;">​</a></h2><p>Most of LaraGram&#39;s configuration files are already published in your application&#39;s <code>config</code> directory; however, certain configuration files like <code>templates.php</code> are not published by default, as most applications will never need to modify them.</p><p>However, you may use the <code>config:publish</code> Commander command to publish any configuration files that are not published by default:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> laragram</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config:publish</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> laragram</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config:publish</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all</span></span></code></pre></div><p><a name="debug-mode"></a></p><h2 id="debug-mode" tabindex="-1">Debug Mode <a class="header-anchor" href="#debug-mode" aria-label="Permalink to &quot;Debug Mode&quot;">​</a></h2><p>The <code>debug</code> option in your <code>config/app.php</code> configuration file determines how much information about an error is actually displayed to the user. By default, this option is set to respect the value of the <code>APP_DEBUG</code> environment variable, which is stored in your <code>.env</code> file.</p><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p>For local development, you should set the <code>APP_DEBUG</code> environment variable to <code>true</code>. <strong>In your production environment, this value should always be <code>false</code>. If the variable is set to <code>true</code> in production, you risk exposing sensitive configuration values to your application&#39;s end users.</strong></p></div>`,97)]))}const u=e(t,[["render",o]]);export{k as __pageData,u as default};
