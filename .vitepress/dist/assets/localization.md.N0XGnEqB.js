import{_ as n,c as t,o as l,ag as e,j as a,a as i,t as p}from"./chunks/framework.BHpayLOB.js";const y=JSON.parse('{"title":"Localization","description":"","frontmatter":{},"headers":[],"relativePath":"localization.md","filePath":"localization.md"}'),h={name:"localization.md"};function o(r,s,d,g,k,c){return l(),t("div",null,[s[4]||(s[4]=e(`<h1 id="localization" tabindex="-1">Localization <a class="header-anchor" href="#localization" aria-label="Permalink to &quot;Localization&quot;">​</a></h1><ul><li><a href="#introduction">Introduction</a><ul><li><a href="#publishing-the-language-files">Publishing the Language Files</a></li><li><a href="#configuring-the-locale">Configuring the Locale</a></li><li><a href="#pluralization-language">Pluralization Language</a></li></ul></li><li><a href="#defining-translation-strings">Defining Translation Strings</a><ul><li><a href="#using-short-keys">Using Short Keys</a></li><li><a href="#using-translation-strings-as-keys">Using Translation Strings as Keys</a></li></ul></li><li><a href="#retrieving-translation-strings">Retrieving Translation Strings</a><ul><li><a href="#replacing-parameters-in-translation-strings">Replacing Parameters in Translation Strings</a></li><li><a href="#pluralization">Pluralization</a></li></ul></li><li><a href="#overriding-package-language-files">Overriding Package Language Files</a></li></ul><p><a name="introduction"></a></p><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>By default, the LaraGram application skeleton does not include the <code>lang</code> directory. If you would like to customize LaraGram&#39;s language files, you may publish them via the <code>lang:publish</code> Commander command.</p></div><p>LaraGram&#39;s localization features provide a convenient way to retrieve strings in various languages, allowing you to easily support multiple languages within your application.</p><p>LaraGram provides two ways to manage translation strings. First, language strings may be stored in files within the application&#39;s <code>lang</code> directory. Within this directory, there may be subdirectories for each language supported by the application. This is the approach LaraGram uses to manage translation strings for built-in LaraGram features such as validation error messages:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/lang</span></span>
<span class="line"><span>    /en</span></span>
<span class="line"><span>        messages.php</span></span>
<span class="line"><span>    /es</span></span>
<span class="line"><span>        messages.php</span></span></code></pre></div><p>Or, translation strings may be defined within JSON files that are placed within the <code>lang</code> directory. When taking this approach, each language supported by your application would have a corresponding JSON file within this directory. This approach is recommended for applications that have a large number of translatable strings:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/lang</span></span>
<span class="line"><span>    en.json</span></span>
<span class="line"><span>    es.json</span></span></code></pre></div><p>We&#39;ll discuss each approach to managing translation strings within this documentation.</p><p><a name="publishing-the-language-files"></a></p><h3 id="publishing-the-language-files" tabindex="-1">Publishing the Language Files <a class="header-anchor" href="#publishing-the-language-files" aria-label="Permalink to &quot;Publishing the Language Files&quot;">​</a></h3><p>By default, the LaraGram application skeleton does not include the <code>lang</code> directory. If you would like to customize LaraGram&#39;s language files or create your own, you should scaffold the <code>lang</code> directory via the <code>lang:publish</code> Commander command. The <code>lang:publish</code> command will create the <code>lang</code> directory in your application and publish the default set of language files used by LaraGram:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> laragram</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lang:publish</span></span></code></pre></div><p><a name="configuring-the-locale"></a></p><h3 id="configuring-the-locale" tabindex="-1">Configuring the Locale <a class="header-anchor" href="#configuring-the-locale" aria-label="Permalink to &quot;Configuring the Locale&quot;">​</a></h3><p>The default language for your application is stored in the <code>config/app.php</code> configuration file&#39;s <code>locale</code> configuration option, which is typically set using the <code>APP_LOCALE</code> environment variable. You are free to modify this value to suit the needs of your application.</p><p>You may also configure a &quot;fallback language&quot;, which will be used when the default language does not contain a given translation string. Like the default language, the fallback language is also configured in the <code>config/app.php</code> configuration file, and its value is typically set using the <code>APP_FALLBACK_LOCALE</code> environment variable.</p><p>You may modify the default language for a single Bot request at runtime using the <code>setLocale</code> method provided by the <code>App</code> facade:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LaraGram\\Support\\Facades\\App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;set {locale}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $locale) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">in_array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($locale, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;en&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;es&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fr&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        App</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setLocale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($locale);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p><a name="determining-the-current-locale"></a></p><h4 id="determining-the-current-locale" tabindex="-1">Determining the Current Locale <a class="header-anchor" href="#determining-the-current-locale" aria-label="Permalink to &quot;Determining the Current Locale&quot;">​</a></h4><p>You may use the <code>currentLocale</code> and <code>isLocale</code> methods on the <code>App</code> facade to determine the current locale or check if the locale is a given value:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LaraGram\\Support\\Facades\\App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$locale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> App</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currentLocale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">App</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isLocale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;en&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a name="pluralization-language"></a></p><h3 id="pluralization-language" tabindex="-1">Pluralization Language <a class="header-anchor" href="#pluralization-language" aria-label="Permalink to &quot;Pluralization Language&quot;">​</a></h3><p>You may instruct LaraGram&#39;s &quot;pluralizer&quot;, which is used by Eloquent and other portions of the framework to convert singular strings to plural strings, to use a language other than English. This may be accomplished by invoking the <code>useLanguage</code> method within the <code>boot</code> method of one of your application&#39;s service providers. The pluralizer&#39;s currently supported languages are: <code>french</code>, <code>norwegian-bokmal</code>, <code>portuguese</code>, <code>spanish</code>, and <code>turkish</code>:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LaraGram\\Support\\Pluralizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Bootstrap any application services.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> boot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Pluralizer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useLanguage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;spanish&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p>If you customize the pluralizer&#39;s language, you should explicitly define your Eloquent model&#39;s <a href="/eloquent.html#table-names">table names</a>.</p></div><p><a name="defining-translation-strings"></a></p><h2 id="defining-translation-strings" tabindex="-1">Defining Translation Strings <a class="header-anchor" href="#defining-translation-strings" aria-label="Permalink to &quot;Defining Translation Strings&quot;">​</a></h2><p><a name="using-short-keys"></a></p><h3 id="using-short-keys" tabindex="-1">Using Short Keys <a class="header-anchor" href="#using-short-keys" aria-label="Permalink to &quot;Using Short Keys&quot;">​</a></h3><p>Typically, translation strings are stored in files within the <code>lang</code> directory. Within this directory, there should be a subdirectory for each language supported by your application. This is the approach LaraGram uses to manage translation strings for built-in LaraGram features such as validation error messages:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/lang</span></span>
<span class="line"><span>    /en</span></span>
<span class="line"><span>        messages.php</span></span>
<span class="line"><span>    /es</span></span>
<span class="line"><span>        messages.php</span></span></code></pre></div><p>All language files return an array of keyed strings. For example:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// lang/en/messages.php</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;welcome&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Welcome to our application!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre></div><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p>For languages that differ by territory, you should name the language directories according to the ISO 15897. For example, &quot;en_GB&quot; should be used for British English rather than &quot;en-gb&quot;.</p></div><p><a name="using-translation-strings-as-keys"></a></p><h3 id="using-translation-strings-as-keys" tabindex="-1">Using Translation Strings as Keys <a class="header-anchor" href="#using-translation-strings-as-keys" aria-label="Permalink to &quot;Using Translation Strings as Keys&quot;">​</a></h3><p>For applications with a large number of translatable strings, defining every string with a &quot;short key&quot; can become confusing when referencing the keys in your views and it is cumbersome to continually invent keys for every translation string supported by your application.</p><p>For this reason, LaraGram also provides support for defining translation strings using the &quot;default&quot; translation of the string as the key. Language files that use translation strings as keys are stored as JSON files in the <code>lang</code> directory. For example, if your application has a Spanish translation, you should create a <code>lang/es.json</code> file:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;I love programming.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Me encanta programar.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="key-file-conflicts" tabindex="-1">Key / File Conflicts <a class="header-anchor" href="#key-file-conflicts" aria-label="Permalink to &quot;Key / File Conflicts&quot;">​</a></h4><p>You should not define translation string keys that conflict with other translation filenames. For example, translating <code>__(&#39;Action&#39;)</code> for the &quot;NL&quot; locale while a <code>nl/action.php</code> file exists but a <code>nl.json</code> file does not exist will result in the translator returning the entire contents of <code>nl/action.php</code>.</p><p><a name="retrieving-translation-strings"></a></p><h2 id="retrieving-translation-strings" tabindex="-1">Retrieving Translation Strings <a class="header-anchor" href="#retrieving-translation-strings" aria-label="Permalink to &quot;Retrieving Translation Strings&quot;">​</a></h2><p>You may retrieve translation strings from your language files using the <code>__</code> helper function. If you are using &quot;short keys&quot; to define your translation strings, you should pass the file that contains the key and the key itself to the <code>__</code> function using &quot;dot&quot; syntax. For example, let&#39;s retrieve the <code>welcome</code> translation string from the <code>lang/en/messages.php</code> language file:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;messages.welcome&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>If the specified translation string does not exist, the <code>__</code> function will return the translation string key. So, using the example above, the <code>__</code> function would return <code>messages.welcome</code> if the translation string does not exist.</p><p>If you are using your <a href="#using-translation-strings-as-keys">default translation strings as your translation keys</a>, you should pass the default translation of your string to the <code>__</code> function;</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;I love programming.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Again, if the translation string does not exist, the <code>__</code> function will return the translation string key that it was given.</p>`,54)),a("p",null,[s[0]||(s[0]=i("If you are using the ")),s[1]||(s[1]=a("a",{href:"/temple8.html"},"Temple8 templating engine",-1)),s[2]||(s[2]=i(", you may use the ")),a("code",null,p(),1),s[3]||(s[3]=i(" echo syntax to display the translation string:"))]),s[5]||(s[5]=e(`<div class="language-blade vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">blade</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;messages.welcome&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span></span></code></pre></div><p><a name="replacing-parameters-in-translation-strings"></a></p><h3 id="replacing-parameters-in-translation-strings" tabindex="-1">Replacing Parameters in Translation Strings <a class="header-anchor" href="#replacing-parameters-in-translation-strings" aria-label="Permalink to &quot;Replacing Parameters in Translation Strings&quot;">​</a></h3><p>If you wish, you may define placeholders in your translation strings. All placeholders are prefixed with a <code>:</code>. For example, you may define a welcome message with a placeholder name:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;welcome&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Welcome, :name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span></code></pre></div><p>To replace the placeholders when retrieving a translation string, you may pass an array of replacements as the second argument to the <code>__</code> function:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;messages.welcome&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;dayle&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span></code></pre></div><p>If your placeholder contains all capital letters, or only has its first letter capitalized, the translated value will be capitalized accordingly:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;welcome&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Welcome, :NAME&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Welcome, DAYLE</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;goodbye&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Goodbye, :Name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Goodbye, Dayle</span></span></code></pre></div><p><a name="object-replacement-formatting"></a></p><h4 id="object-replacement-formatting" tabindex="-1">Object Replacement Formatting <a class="header-anchor" href="#object-replacement-formatting" aria-label="Permalink to &quot;Object Replacement Formatting&quot;">​</a></h4><p>If you attempt to provide an object as a translation placeholder, the object&#39;s <code>__toString</code> method will be invoked. The <a href="https://www.php.net/manual/en/language.oop5.magic.php#object.tostring" target="_blank" rel="noreferrer">__toString</a> method is one of PHP&#39;s built-in &quot;magic methods&quot;. However, sometimes you may not have control over the <code>__toString</code> method of a given class, such as when the class that you are interacting with belongs to a third-party library.</p><p>In these cases, LaraGram allows you to register a custom formatting handler for that particular type of object. To accomplish this, you should invoke the translator&#39;s <code>stringable</code> method. The <code>stringable</code> method accepts a closure, which should type-hint the type of object that it is responsible for formatting. Typically, the <code>stringable</code> method should be invoked within the <code>boot</code> method of your application&#39;s <code>AppServiceProvider</code> class:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LaraGram\\Support\\Facades\\Lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Money\\Money</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Bootstrap any application services.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> boot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Money</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $money) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $money</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">formatTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;en_GB&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a name="pluralization"></a></p><h3 id="pluralization" tabindex="-1">Pluralization <a class="header-anchor" href="#pluralization" aria-label="Permalink to &quot;Pluralization&quot;">​</a></h3><p>Pluralization is a complex problem, as different languages have a variety of complex rules for pluralization; however, LaraGram can help you translate strings differently based on pluralization rules that you define. Using a <code>|</code> character, you may distinguish singular and plural forms of a string:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;apples&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;There is one apple|There are many apples&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span></code></pre></div><p>Of course, pluralization is also supported when using <a href="#using-translation-strings-as-keys">translation strings as keys</a>:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;There is one apple|There are many apples&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hay una manzana|Hay muchas manzanas&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>You may even create more complex pluralization rules which specify translation strings for multiple ranges of values:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;apples&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{0} There are none|[1,19] There are some|[20,*] There are many&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span></code></pre></div><p>After defining a translation string that has pluralization options, you may use the <code>trans_choice</code> function to retrieve the line for a given &quot;count&quot;. In this example, since the count is greater than one, the plural form of the translation string is returned:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> trans_choice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;messages.apples&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>You may also define placeholder attributes in pluralization strings. These placeholders may be replaced by passing an array as the third argument to the <code>trans_choice</code> function:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;minutes_ago&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{1} :value minute ago|[2,*] :value minutes ago&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> trans_choice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;time.minutes_ago&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span></code></pre></div><p>If you would like to display the integer value that was passed to the <code>trans_choice</code> function, you may use the built-in <code>:count</code> placeholder:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;apples&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{0} There are none|{1} There is one|[2,*] There are :count&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span></code></pre></div><p><a name="overriding-package-language-files"></a></p><h2 id="overriding-package-language-files" tabindex="-1">Overriding Package Language Files <a class="header-anchor" href="#overriding-package-language-files" aria-label="Permalink to &quot;Overriding Package Language Files&quot;">​</a></h2><p>Some packages may ship with their own language files. Instead of changing the package&#39;s core files to tweak these lines, you may override them by placing files in the <code>lang/vendor/{package}/{locale}</code> directory.</p><p>So, for example, if you need to override the English translation strings in <code>messages.php</code> for a package named <code>skyrim/hearthfire</code>, you should place a language file at: <code>lang/vendor/hearthfire/en/messages.php</code>. Within this file, you should only define the translation strings you wish to override. Any translation strings you don&#39;t override will still be loaded from the package&#39;s original language files.</p>`,32))])}const E=n(h,[["render",o]]);export{y as __pageData,E as default};
