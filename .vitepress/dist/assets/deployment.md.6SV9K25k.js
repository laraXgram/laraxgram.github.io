import{_ as e,c as n,o as t,ag as a,j as i}from"./chunks/framework.BHpayLOB.js";const g=JSON.parse('{"title":"Deployment","description":"","frontmatter":{},"headers":[],"relativePath":"deployment.md","filePath":"deployment.md"}'),l={name:"deployment.md"};function o(p,s,h,r,d,c){return t(),n("div",null,s[0]||(s[0]=[a('<h1 id="deployment" tabindex="-1">Deployment <a class="header-anchor" href="#deployment" aria-label="Permalink to &quot;Deployment&quot;">​</a></h1><ul><li><a href="#introduction">Introduction</a></li><li><a href="#server-requirements">Server Requirements</a></li><li><a href="#server-configuration">Server Configuration</a><ul><li><a href="#nginx">Nginx</a></li><li><a href="#directory-permissions">Directory Permissions</a></li></ul></li><li><a href="#optimization">Optimization</a><ul><li><a href="#optimizing-configuration-loading">Caching Configuration</a></li><li><a href="#caching-events">Caching Events</a></li><li><a href="#optimizing-listen-loading">Caching Listens</a></li><li><a href="#optimizing-template-loading">Caching Templates</a></li></ul></li><li><a href="#debug-mode">Debug Mode</a></li></ul><p><a name="introduction"></a></p><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>When you&#39;re ready to deploy your LaraGram application to production, there are some important things you can do to make sure your application is running as efficiently as possible. In this document, we&#39;ll cover some great starting points for making sure your LaraGram application is deployed properly.</p><p><a name="server-requirements"></a></p><h2 id="server-requirements" tabindex="-1">Server Requirements <a class="header-anchor" href="#server-requirements" aria-label="Permalink to &quot;Server Requirements&quot;">​</a></h2><p>The LaraGram framework has a few system requirements. You should ensure that your web server has the following minimum PHP version and extensions:</p>',8),i("div",{class:"content-list",markdown:"1"},[i("ul",null,[i("li",null,"PHP >= 8.2"),i("li",null,"Ctype PHP Extension"),i("li",null,"cURL PHP Extension"),i("li",null,"Fileinfo PHP Extension"),i("li",null,"Filter PHP Extension"),i("li",null,"Hash PHP Extension"),i("li",null,"Mbstring PHP Extension"),i("li",null,"OpenSSL PHP Extension"),i("li",null,"PCRE PHP Extension"),i("li",null,"PDO PHP Extension"),i("li",null,"Tokenizer PHP Extension")])],-1),a(`<p><a name="server-configuration"></a></p><h2 id="server-configuration" tabindex="-1">Server Configuration <a class="header-anchor" href="#server-configuration" aria-label="Permalink to &quot;Server Configuration&quot;">​</a></h2><p><a name="nginx"></a></p><h3 id="nginx" tabindex="-1">Nginx <a class="header-anchor" href="#nginx" aria-label="Permalink to &quot;Nginx&quot;">​</a></h3><p>If you are deploying your application to a server that is running Nginx, you may use the following configuration file as a starting point for configuring your web server. Most likely, this file will need to be customized depending on your server&#39;s configuration.</p><p>Please ensure, like the configuration below, your web server directs all requests to your application&#39;s <code>public/index.php</code> file. You should never attempt to move the <code>index.php</code> file to your project&#39;s root, as serving the application from the project root will expose many sensitive configuration files to the public Internet:</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    listen </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[::]:80;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">example.com;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    root </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/srv/example.com/public;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X-Frame-Options </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SAMEORIGIN&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X-Content-Type-Options </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nosniff&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    index </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index.php;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    charset </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">utf-8;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try_files </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$uri $uri/ /index.php?$query_string;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> /favicon.ico </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> access_log </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">off</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> log_not_found </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">off</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> /robots.txt  </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> access_log </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">off</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> log_not_found </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">off</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    error_page </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">404</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /index.php;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ~</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> ^/index\\.php(/|$) </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        fastcgi_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unix:/var/run/php/php8.2-fpm.sock;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        fastcgi_param </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SCRIPT_FILENAME $realpath_root$fastcgi_script_name;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        include </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fastcgi_params;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        fastcgi_hide_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X-Powered-By;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ~</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> /\\.(?!well-known).* </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        deny </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a name="directory-permissions"></a></p><h3 id="directory-permissions" tabindex="-1">Directory Permissions <a class="header-anchor" href="#directory-permissions" aria-label="Permalink to &quot;Directory Permissions&quot;">​</a></h3><p>LaraGram will need to write to the <code>bootstrap/cache</code> and <code>storage</code> directories, so you should ensure the web server process owner has permission to write to these directories.</p><p><a name="optimization"></a></p><h2 id="optimization" tabindex="-1">Optimization <a class="header-anchor" href="#optimization" aria-label="Permalink to &quot;Optimization&quot;">​</a></h2><p>When deploying your application to production, there are a variety of files that should be cached, including your configuration, events, listens, and templates. LaraGram provides a single, convenient <code>optimize</code> Commander command that will cache all of these files. This command should typically be invoked as part of your application&#39;s deployment process:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> laragram</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> optimize</span></span></code></pre></div><p>The <code>optimize:clear</code> method may be used to remove all of the cache files generated by the <code>optimize</code> command as well as all keys in the default cache driver:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> laragram</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> optimize:clear</span></span></code></pre></div><p>In the following documentation, we will discuss each of the granular optimization commands that are executed by the <code>optimize</code> command.</p><p><a name="optimizing-configuration-loading"></a></p><h3 id="caching-configuration" tabindex="-1">Caching Configuration <a class="header-anchor" href="#caching-configuration" aria-label="Permalink to &quot;Caching Configuration&quot;">​</a></h3><p>When deploying your application to production, you should make sure that you run the <code>config:cache</code> Commander command during your deployment process:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> laragram</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config:cache</span></span></code></pre></div><p>This command will combine all of LaraGram&#39;s configuration files into a single, cached file, which greatly reduces the number of trips the framework must make to the filesystem when loading your configuration values.</p><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p>If you execute the <code>config:cache</code> command during your deployment process, you should be sure that you are only calling the <code>env</code> function from within your configuration files. Once the configuration has been cached, the <code>.env</code> file will not be loaded and all calls to the <code>env</code> function for <code>.env</code> variables will return <code>null</code>.</p></div><p><a name="caching-events"></a></p><h3 id="caching-events" tabindex="-1">Caching Events <a class="header-anchor" href="#caching-events" aria-label="Permalink to &quot;Caching Events&quot;">​</a></h3><p>You should cache your application&#39;s auto-discovered event to listener mappings during your deployment process. This can be accomplished by invoking the <code>event:cache</code> Commander command during deployment:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> laragram</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> event:cache</span></span></code></pre></div><p><a name="optimizing-listen-loading"></a></p><h3 id="caching-listens" tabindex="-1">Caching Listens <a class="header-anchor" href="#caching-listens" aria-label="Permalink to &quot;Caching Listens&quot;">​</a></h3><p>If you are building a large application with many listens, you should make sure that you are running the <code>listen:cache</code> Commander command during your deployment process:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> laragram</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> listen:cache</span></span></code></pre></div><p>This command reduces all of your listen registrations into a single method call within a cached file, improving the performance of listen registration when registering hundreds of listens.</p><p><a name="optimizing-template-loading"></a></p><h3 id="caching-templates" tabindex="-1">Caching Templates <a class="header-anchor" href="#caching-templates" aria-label="Permalink to &quot;Caching Templates&quot;">​</a></h3><p>When deploying your application to production, you should make sure that you run the <code>template:cache</code> Commander command during your deployment process:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> laragram</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> template:cache</span></span></code></pre></div><p>This command precompiles all your Blade templates so they are not compiled on demand, improving the performance of each request that returns a template.</p><p><a name="debug-mode"></a></p><h2 id="debug-mode" tabindex="-1">Debug Mode <a class="header-anchor" href="#debug-mode" aria-label="Permalink to &quot;Debug Mode&quot;">​</a></h2><p>The debug option in your <code>config/app.php</code> configuration file determines how much information about an error is actually displayed to the user. By default, this option is set to respect the value of the <code>APP_DEBUG</code> environment variable, which is stored in your application&#39;s <code>.env</code> file.</p><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p><strong>In your production environment, this value should always be <code>false</code>. If the <code>APP_DEBUG</code> variable is set to <code>true</code> in production, you risk exposing sensitive configuration values to your application&#39;s end users.</strong></p></div>`,41)]))}const u=e(l,[["render",o]]);export{g as __pageData,u as default};
